// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String         @unique
  email        String         @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime       @default(now())
  subscription Subscription?
  integrations Integrations[]
  automations  Automation[]
  workspaces   Workspace[]
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Integrations {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      @db.Uuid
  token       String       @unique
  expiresAt   DateTime?
  instagramId String?      @unique
}

model Automation {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String              @default("Untitled")
  createdAt     DateTime            @default(now())
  active        Boolean             @default(false)
  trigger       Trigger[]
  listener      Listener?
  posts         Post[]
  dms           Dms[]
  User          User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?             @db.Uuid
  keywords      Keyword[]
  conversations AgentConversation[]
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @db.Uuid
  createdAt    DateTime   @default(now())

  @@unique([automationId, word])
}

model Workspace {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agents      Agent[]
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?  @db.Uuid
}

model Agent {
  id            String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String
  capabilities  String[]
  model         String
  temperature   Float
  maxTokens     Int
  systemPrompt  String
  active        Boolean                   @default(true)
  metricsPeriod String                    @default("DAILY")
  workspaceId   String                    @db.Uuid
  workspace     Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  metrics       AgentPerformanceMetrics[]
  conversations AgentConversation[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model AgentConversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId      String      @db.Uuid
  agent        Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  userId       String      @db.Uuid
  automationId String?     @db.Uuid
  automation   Automation? @relation(fields: [automationId], references: [id])
  turns        Json[]
  status       String
  startedAt    DateTime
  endedAt      DateTime?
  metadata     Json?
}

model AgentPerformanceMetrics {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId   String   @db.Uuid
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  period    String
  metrics   Json
  timestamp DateTime
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum LISTENERS {
  MESSAGE
  COMMENT
  SMARTAI
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}
